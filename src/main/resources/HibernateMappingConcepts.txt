owning Entity - The Entity in which we are writting that annotaion
@OneToOne - UniDirectional(without @JoinCloumn) - 1. will create only two entity's table(Student and MemberDetail) not any extra table
                                                  2. will create one foreignKey column in owning entity
            UniDirectional(with @JoinCloumn)    - 1. Here @JoinColumn is used for only renaming foreign key column of owning entity
            BiDirectional(without @JoinColumn)  - 1. will create only two entity's table not any extra table
                                                  2. will create two foreignKey's column in each owning entity
            BiDirectional(with @JoinCloumn)     - 1. Here @JoinColumn is used for only renaming foreign key column of owning entity
            BiDirectional(with @JoinCloumn 
                          and mappedBY)         - 1. Here @JoinColumn is used for only renaming foreign key column of owning entity
                                                  2. If we use mappedBy in a entity then the foreign key column won't be created in 
                                                  that entity's table

                                                  ForeignKey will always be created on the many side of mapping

@OneToMany - UniDirectional(without @JoinCloumn) - 1. will create both entity's table and one extra table with name owningEntity_TargetEntity
                                                  2. will create only two columns in that extra third table. One is for primary key of owning entity and another one is for primary 
                                                     key of target entity
            UniDirectional(with @JoinCloumn)    - 1. If we use @JoinColumn in (student entity) then hibernate will not create any extra table but it will create a foreign key 
                                                     column in target entity's table (FeeReceipt Table) with name mentioned in @joincolumn annotaion
            BiDirectional(without @JoinColumn)  - 1. will create both entity's table and two extra tables with names owningEntity_TargetEntity
                                                  2. will create only two columns in both extra third table. One is for primary key of owning entity and another one is for primary 
                                                     key of target entity
            BiDirectional(with @JoinCloumn)     - 1. If we use @JoinColumn in (student entity) then hibernate will create a column in 
                                                     target entity's table (FeeReceipt Table) with name mentioned in @joincolumn annotaion
                                                  2. will create one extra  column in target entity's table (with owning table's id column) 
                                                     because we use @ManyToOne annotaion in target entity. But this foreign key will be inerted null evrytime
            BiDirectional(with @JoinCloumn 
                          and mappedBY)         - 1. If we use @JoinColumn in (FeeReceipt entity) target then hibernate will create a foreign key column in 
                                                     target entity's table (FeeReceipt Table) with name mentioned in @joincolumn annotaion
                                                  2. If we use mappedBy in a entity then the foreign key column will be created in 
                                                     other entity's table

@ManyToOne - UniDirectional(without @JoinCloumn) - 1. will create both entity's table
                                                  2. will create one column(acts as foreign key) in owning entity with target entity's id column
            UniDirectional(with @JoinCloumn)    - 1. If we use @JoinColumn in (student entity) then hibernate will create a foreign key column in 
                                                    owning entity's table (student Table) with name mentioned in @joincolumn annotaion


@ManyToMany - UniDirectional(without @JoinCloumn) - 1. will create both entity's table and two extra table with name owningEntity_TargetEntity and targetEntity_owningEntity
            UniDirectional(with @JoinCloumn)    - 1. will create both entity's table and two extra table with name owningEntity_TargetEntity and targetEntity_owningEntity
            BiDirectional(without @JoinColumn)  - 1.will create both entity's table and two extra table with name owningEntity_TargetEntity and targetEntity_owningEntity
            BiDirectional(with @JoinCloumn)     - 1.will create both entity's table and two extra table with name owningEntity_TargetEntity and targetEntity_owningEntity
            BiDirectional(with @JoinCloumn 
                          and mappedBY)         - 1.will create both entity's table and two extra table with name owningEntity_TargetEntity and targetEntity_owningEntity
                          
                          we use @JoinTable if we want to avoid one extra table generation